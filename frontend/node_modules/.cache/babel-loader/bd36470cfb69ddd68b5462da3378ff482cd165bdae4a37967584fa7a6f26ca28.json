{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\parat\\\\Downloads\\\\kafka_chatbot_full_option_a\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [username, setUsername] = useState('Guest');\n  const [message, setMessage] = useState('');\n  const [chat, setChat] = useState([]);\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      try {\n        const res = await fetch('http://localhost:5000/responses');\n        const data = await res.json();\n        setChat(data);\n      } catch (e) {}\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  const send = async () => {\n    if (!message) return;\n    await fetch('http://localhost:5000/send', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        message\n      })\n    });\n    setMessage('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Kafka Chatbot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        value: username,\n        onChange: e => setUsername(e.target.value),\n        placeholder: \"Your name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-area\",\n      children: chat.map((c, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-line\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: c.bot || 'Bot'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this), \": \", c.reply]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"composer\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        onKeyDown: e => {\n          if (e.key === 'Enter') send();\n        },\n        placeholder: \"Type a message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: send,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"61EXPsSBzdqjJX9tfS00li0NXLY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","username","setUsername","message","setMessage","chat","setChat","interval","setInterval","res","fetch","data","json","e","clearInterval","send","method","headers","body","JSON","stringify","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","target","placeholder","map","c","i","bot","reply","onKeyDown","key","onClick","_c","$RefreshReg$"],"sources":["C:/Users/parat/Downloads/kafka_chatbot_full_option_a/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [username, setUsername] = useState('Guest');\n  const [message, setMessage] = useState('');\n  const [chat, setChat] = useState([]);\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      try {\n        const res = await fetch('http://localhost:5000/responses');\n        const data = await res.json();\n        setChat(data);\n      } catch (e) {\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const send = async () => {\n    if (!message) return;\n    await fetch('http://localhost:5000/send', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ username, message })\n    });\n    setMessage('');\n  };\n\n  return (\n    <div className=\"app\">\n      <h2>Kafka Chatbot</h2>\n      <div className=\"controls\">\n        <input value={username} onChange={e => setUsername(e.target.value)} placeholder=\"Your name\" />\n      </div>\n      <div className=\"chat-area\">\n        {chat.map((c, i) => (\n          <div key={i} className=\"chat-line\">\n            <strong>{c.bot || 'Bot'}</strong>: {c.reply}\n          </div>\n        ))}\n      </div>\n      <div className=\"composer\">\n        <input value={message} onChange={e => setMessage(e.target.value)} onKeyDown={e => { if(e.key==='Enter') send(); }} placeholder=\"Type a message\" />\n        <button onClick={send}>Send</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}